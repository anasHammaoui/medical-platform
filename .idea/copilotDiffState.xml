<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/medicalplatform/service/impl/PatientService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/medicalplatform/service/impl/PatientService.java" />
              <option name="originalContent" value="package com.example.medicalplatform.service.impl;&#10;&#10;import com.example.medicalplatform.dao.impl.PatientDao;&#10;import com.example.medicalplatform.model.Consultation;&#10;import com.example.medicalplatform.model.DossierMedical;&#10;import com.example.medicalplatform.model.Patient;&#10;import com.example.medicalplatform.model.SignesVitaux;&#10;import com.example.medicalplatform.service.PatientServiceInterface;&#10;import jakarta.persistence.NoResultException;&#10;import org.hibernate.HibernateException;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class PatientService implements PatientServiceInterface {&#10;    private final PatientDao patientDao;&#10;    public PatientService() {&#10;        this.patientDao = new PatientDao();&#10;    }&#10;&#10;    @Override&#10;    public Patient addPatient(Patient patient, DossierMedical dossierMedical, SignesVitaux signesVitaux) throws HibernateException {&#10;        patient.setDossierMedical(dossierMedical);&#10;        dossierMedical.setPatient(patient);&#10;        dossierMedical.setSignesVitaux(signesVitaux);&#10;        signesVitaux.setDossierMedical(dossierMedical);&#10;        &#10;        dossierMedical.setConsultations(new ArrayList&lt;&gt;());&#10;        (new Consultation()).setDossierMedical(dossierMedical);&#10;        try {&#10;            return patientDao.addPatient(patient);&#10;        } catch (HibernateException e) {&#10;            throw new HibernateException(&quot;Patient service exception: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Patient getPatient(long id) throws NoResultException {&#10;        try {&#10;            return patientDao.getPatient(id);&#10;        } catch (NoResultException e) {&#10;            throw new NoResultException(&quot;Patient service exception: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Patient&gt; getPatients() throws NoResultException {&#10;        try {&#10;            return patientDao.getPatients();&#10;        } catch (NoResultException e) {&#10;            throw new NoResultException(&quot;Patient service exception: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Patient updatePatient(Patient patient, DossierMedical dossierMedical, SignesVitaux signesVitaux) throws HibernateException {&#10;        try {&#10;            patient.setDossierMedical(dossierMedical);&#10;            dossierMedical.setPatient(patient);&#10;            dossierMedical.setSignesVitaux(signesVitaux);&#10;            return patientDao.updatePatient(patient);&#10;        } catch (HibernateException e) {&#10;            throw new HibernateException(&quot;Patient service exception: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.medicalplatform.service.impl;&#10;&#10;import com.example.medicalplatform.dao.impl.PatientDao;&#10;import com.example.medicalplatform.model.Consultation;&#10;import com.example.medicalplatform.model.DossierMedical;&#10;import com.example.medicalplatform.model.Patient;&#10;import com.example.medicalplatform.model.SignesVitaux;&#10;import com.example.medicalplatform.service.PatientServiceInterface;&#10;import jakarta.persistence.NoResultException;&#10;import org.hibernate.HibernateException;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class PatientService implements PatientServiceInterface {&#10;    private final PatientDao patientDao;&#10;    public PatientService() {&#10;        this.patientDao = new PatientDao();&#10;    }&#10;&#10;    @Override&#10;    public Patient addPatient(Patient patient, DossierMedical dossierMedical, SignesVitaux signesVitaux) throws HibernateException {&#10;        patient.setDossierMedical(dossierMedical);&#10;        dossierMedical.setPatient(patient);&#10;        dossierMedical.setSignesVitaux(signesVitaux);&#10;        signesVitaux.setDossierMedical(dossierMedical);&#10;        &#10;        dossierMedical.setConsultations(new ArrayList&lt;&gt;());&#10;        (new Consultation()).setDossierMedical(dossierMedical);&#10;        try {&#10;            return patientDao.addPatient(patient);&#10;        } catch (HibernateException e) {&#10;            throw new HibernateException(&quot;Patient service exception: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Patient getPatient(long id) throws NoResultException {&#10;        try {&#10;            return patientDao.getPatient(id);&#10;        } catch (NoResultException e) {&#10;            throw new NoResultException(&quot;Patient service exception: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Patient&gt; getPatients() {&#10;        try {&#10;            return patientDao.getPatients();&#10;        } catch (Exception e) {&#10;            // Log the error but return empty list instead of throwing exception&#10;            System.err.println(&quot;Error getting patients: &quot; + e.getMessage());&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Patient updatePatient(Patient patient, DossierMedical dossierMedical, SignesVitaux signesVitaux) throws HibernateException {&#10;        try {&#10;            patient.setDossierMedical(dossierMedical);&#10;            dossierMedical.setPatient(patient);&#10;            dossierMedical.setSignesVitaux(signesVitaux);&#10;            return patientDao.updatePatient(patient);&#10;        } catch (HibernateException e) {&#10;            throw new HibernateException(&quot;Patient service exception: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>